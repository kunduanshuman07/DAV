# -*- coding: utf-8 -*-
"""Data Analysis and Visualisation

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gFMVRuv9kNJIc42ILjDK8MF26f531xLH

### **Getting Started with Python**

A grocery store sells a bag of ice for $1.25 and makes a 20% profit. If it sells 500 bags of ice, how much total profit does it make?
"""

costPrice = 1.25/1.2
print(costPrice)

sellingCost_of_total_bags=500*1.25
purchaseCost_of_total_bags=500*costPrice

total_profit_p=(sellingCost_of_total_bags-purchaseCost_of_total_bags)*100/purchaseCost_of_total_bags

print("Total Profit percentage = ",total_profit_p)
print("Total Profit = ",sellingCost_of_total_bags-purchaseCost_of_total_bags)

"""A travel company wants to fly a plane to the Bahamas. Flying the plane costs 5000 dollars. So far, 29 people have signed up for the trip. If the company charges 200 dollars per ticket, what is the profit made by the company? Create variables for each numeric quantity and use appropriate arithmetic operations."""

flyingPlaneCost=5000
numberOfPeople=29
ticketCharges=200
totalAmountGathered=200*29
profit=totalAmountGathered-flyingPlaneCost
print(profit)

"""Question on Functions:"""

def spendCalculation(num_days, return_flight, hotel_per_day, car_rent):
    weeks = (num_days // 7) + (num_days % 7)
    total_spend = (return_flight) + (num_days * hotel_per_day) + (car_rent * weeks)
    return total_spend

paris = spendCalculation(7, 200, 20, 200)
london = spendCalculation(7, 250, 30, 120)
dubai = spendCalculation(7, 370, 15, 80)
mumbai = spendCalculation(7, 450, 10, 70)
print("Paris", paris)
print("London", london)
print("Dubai", dubai)
print("Mumbai", mumbai)

"""# **Numerical Computation with Numpy**

Suppose we want to use climate data like the temperature, rainfall, and humidity to determine if a region is well suited for growing apples. A simple approach for doing this would be to formulate the relationship between the annual yield of apples (tons per hectare) and the climatic conditions like the average temperature (in degrees Fahrenheit), rainfall (in millimeters) & average relative humidity (in percentage) as a linear equation.
yield_of_apples = w1 * temperature + w2 * rainfall + w3 * humidity
"""

#doing the above question using normal pythom code:
w1, w2, w3 = 0.3, 0.2, 0.5
weights=[w1,w2,w3]
kanto = [73, 67, 43]
johto = [91, 88, 64]
hoenn = [87, 134, 58]
sinnoh = [102, 43, 37]
unova = [69, 96, 70]
def yield_of_apples(weights,region):
  result=0
  for i,j in zip(weights,region):
    result+=i*j

  return result

print(yield_of_apples(weights,kanto))
print(yield_of_apples(weights,johto))
print(yield_of_apples(weights,hoenn))

#Doing the same work using numpy arrays:
!pip install numpy

import numpy as np

kanto=np.array([73,67,43])
kanto

weights=np.array([w1,w2,w3])
weights

print(np.dot(kanto,weights))
print(np.dot(johto,weights))
print(np.dot(hoenn,weights))

# we achieved the dot product of the array without defining any fucntion just using numpy dot function.

#Benefits of using numpy arrays on dot operation using million eelements: (Look below the time usage)

#python arrays:
arr1=list(range(100000))
arr2=list(range(100000))

#numpy array:
arr1_n=np.array(arr1)
arr2_n=np.array(arr2)

%%time
py_result=0
for i,j in zip(arr1,arr2):
  py_result+=i*j


%%time
np_result=arr1_n*arr2_n

"""# Reading and Writing files"""

#Reading a file named climate.txt:
import urllib.request
urllib.request.urlretrieve('https://gist.github.com/BirajCoder/a4ffcb76fd6fb221d76ac2ee2b8584e9/raw/4054f90adfd361b7aa4255e99c2e874664094cea/climate.csv',
    'climate.txt')
climate_data=np.genfromtxt('climate.txt',delimiter=',',skip_header=1)
climate_data

climate_data.shape

climate_data.dtype

# matrix multiplication & conatenation
weights = np.array([0.3, 0.2, 0.5])
yields = climate_data @ weights
yields

yields.shape

climate_results=np.concatenate((climate_data,yields.reshape(10000,1)),axis=1)
climate_results

np.savetxt('climate_results.txt',
           climate_results,
           fmt='%.2f',
           delimiter=',',
           header='temperature,rainfall,humidity,yeild_apples',
           comments='')

"""# Arithmetic operations, broadcasting and comparisions"""

arr2 = np.array([[1, 2, 3, 4],
                 [5, 6, 7, 8],
                 [9, 1, 2, 3]])
arr3 = np.array([[11, 12, 13, 14],
                 [15, 16, 17, 18],
                 [19, 11, 12, 13]])

arr2.shape
arr3.shape

#adding a scalar
arr2+3

#element wise substraction
arr2-arr3

#Division by scalar
arr2/4

#element wise multiplication
arr2*arr3

#Broadcasting
arr2.shape

arr4 = np.array([4, 5, 6, 7])
arr4.shape

arr2+arr4

arr5 = np.array([4, 5])
arr5.shape

#Broadcasting error
arr5+arr2

#comparision
arr1 = np.array([[1, 2, 3], [3, 4, 5]])
arr2 = np.array([[2, 2, 3], [1, 2, 5]])

arr1==arr2

arr1!=arr2

"""# Array Indexing and Slicing"""

arr3 = np.array([
    [[11, 12, 13, 14],
     [13, 14, 15, 19]],

    [[15, 16, 17, 21],
     [63, 92, 36, 18]],

    [[98, 32, 81, 23],
     [17, 18, 19.5, 43]]])

arr3.shape

arr3[1,1,2]

arr3[1,1]

arr3[1,0,0]

arr3[2]

# Subarray using ranges
arr3[1:]

arr3[1:,0:1, :2]

arr3[1:,1,3]

arr3[1:, 1, :3]

"""# Other ways of creating numpy arrays"""

#All zeros
np.zeros((3,2))

#All ones
np.ones([1,1,2])

# Identity matrix
np.eye(3)

# Random vector
np.random.rand(5)

# Random matrix
np.random.randn(2, 3)

help(np.random.rand)

help(np.random.randn)

# Fixed value
np.full([2, 3], 42)

# Range with start, end and step
np.arange(10, 90, 3)

# Equally spaced numbers in a range
np.linspace(3, 27, 9)



