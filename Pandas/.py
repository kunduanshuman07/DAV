# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NKNKbh2FnQyE0_w_2CsQU0pxv9av54UB

# Reading a csv file using Pandas
"""

from urllib.request import urlretrieve

italy_covid_url = 'https://gist.githubusercontent.com/aakashns/f6a004fa20c84fec53262f9a8bfee775/raw/f309558b1cf5103424cef58e2ecb8704dcd4d74c/italy-covid-daywise.csv'
urlretrieve(italy_covid_url, 'italy-covid-daywise.csv')

!pip install pandas

import pandas as pd

covid_df=pd.read_csv('italy-covid-daywise.csv')
covid_df

type(covid_df)

covid_df.info()

covid_df.describe()

covid_df.columns

covid_df.shape

# Pandas format is simliar to this
covid_data_dict = {
    'date':       ['2020-08-30', '2020-08-31', '2020-09-01', '2020-09-02', '2020-09-03'],
    'new_cases':  [1444, 1365, 996, 975, 1326],
    'new_deaths': [1, 4, 6, 8, 6],
    'new_tests': [53541, 42583, 54395, None, None]
}

covid_data_dict['new_cases']

covid_df['new_cases']

type(covid_df['new_cases'])

cases_df=covid_df[['date','new_cases']]
cases_df

covid_df_copy=covid_df.copy()
covid_df_copy

#accessing a specific row of a pandas dataframe
covid_df.loc[243]

covid_df.head(5)

covid_df.tail(5)

#fetching the first value of a particular row which is not null
covid_df.new_tests.first_valid_index()

#slicing to check the above validity
covid_df.loc[108:113]

#random sample
covid_df.sample(10)

"""# Analyzing data from dataframes"""

# Q: What are the total number of reported cases and deaths related to Covid-19 in Italy?
total_cases=int(covid_df['new_cases'].sum())
total_deaths=int(covid_df['new_deaths'].sum())

print(total_cases,total_deaths)

#Q: What is the overall death rate (ratio of reported deaths to reported cases)?
death_rate=covid_df.new_deaths.sum()/covid_df.new_cases.sum()
format(death_rate*100)

#Q: What is the overall number of tests conducted? A total of 935310 tests were conducted before daily test numbers were reported.
initial_tests=935310
total_tests=initial_tests+covid_df.new_tests.sum()
total_tests

# Q: What fraction of tests returned a positive result?
positive_result=total_cases/total_tests
format(positive_result*100)

"""# Querying and sorting rows"""

high_new_cases=covid_df.new_cases>1000
high_new_cases

covid_df[high_new_cases]

# as this notebook is showing the last and first 5 rows, to view the whole data:
from IPython.display import display
with pd.option_context('display.max_rows',100):
  display(covid_df[high_new_cases])

positive_result

# Complex qeries
high_ratio_df=covid_df[covid_df.new_cases/covid_df.new_tests>positive_result]
high_ratio_df

high_ratio_column=covid_df.new_cases/covid_df.new_tests
covid_df['positive_rate']=high_ratio_column
covid_df

# dropping the column positive rate
covid_df.drop(columns=['positive_rate'],inplace=True)

"""# Sorting rows using column values"""

covid_df.sort_values('new_cases',ascending=False).head(10)

covid_df.sort_values('new_cases').head(10)

"""# Working with dates"""

covid_df.date

covid_df.date.dtype

# coverting the date column which is object right now to datetime

covid_df['date']=pd.to_datetime(covid_df.date)
covid_df['date']

# adding new columns and playing with date time
covid_df['year'] = pd.DatetimeIndex(covid_df.date).year
covid_df['month'] = pd.DatetimeIndex(covid_df.date).month
covid_df['day'] = pd.DatetimeIndex(covid_df.date).day
covid_df['weekday'] = pd.DatetimeIndex(covid_df.date).weekday
covid_df

# Checking the overall metrics of a particular month (May month lets say)
covid_df_may=covid_df[covid_df.month==5]

covid_df_may_metrics=covid_df_may[['new_cases','new_deaths','new_tests']]

covid_may_totals=covid_df_may_metrics.sum()

covid_may_totals

"""# Grouping and Aggregation"""

covid_month_df=covid_df.groupby('month')[['new_cases','new_deaths','new_tests']].sum()
covid_month_df

covid_df['total_cases'] = covid_df.new_cases.cumsum()
covid_df['total_deaths'] = covid_df.new_deaths.cumsum()
covid_df['total_tests'] = covid_df.new_tests.cumsum() + initial_tests

"""# Merging Data from Multiple Sources"""

urlretrieve('https://gist.githubusercontent.com/aakashns/8684589ef4f266116cdce023377fc9c8/raw/99ce3826b2a9d1e6d0bde7e9e559fc8b6e9ac88b/locations.csv',
            'locations.csv')
locations_df = pd.read_csv('locations.csv')
locations_df



#merging
covid_df['location']="Italy"
merged_df=covid_df.merge(locations_df,on="location")
merged_df

# Querying data on merged_df
merged_df['cases_per_million'] = merged_df.total_cases * 1e6 / merged_df.population
merged_df['deaths_per_million'] = merged_df.total_deaths * 1e6 / merged_df.population
merged_df['tests_per_million'] = merged_df.total_tests * 1e6 / merged_df.population

"""# Writing data back to files"""

# Creating a new df with merged columns we wish to record the data about
result_df = merged_df[['date',
                       'new_cases',
                       'total_cases',
                       'new_deaths',
                       'total_deaths',
                       'new_tests',
                       'total_tests',
                       'cases_per_million',
                       'deaths_per_million',
                       'tests_per_million']]

result_df

result_df.to_csv('results.csv', index=None)

"""# Basic Plotting with Pandas"""

result_df.new_cases.plot()

# settig and index to analyze plot with some specific column
result_df.set_index('date',inplace=True)
result_df

# Now the plotting will be based on dates
result_df.new_cases.plot()
result_df.new_deaths.plot();

result_df.total_cases.plot()
result_df.total_deaths.plot();

positive_rates = result_df.total_cases / result_df.total_tests
positive_rates.plot(title='Positive Rate');

covid_month_df.new_cases.plot(kind='bar');